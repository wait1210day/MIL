#include <iostream>
#include <Moe.h>
#include <cstdlib>
#include <cstdint>
#include <string>
#include <unistd.h>
#include <cstdio>

/**
 * 恭喜你找到本程序的彩蛋部分！
 * 嘛，程序也是要买萌的说！（大雾）
 * 彩蛋分为几个部分：
 *  1. 日 本 天 皇 孙 咲 川 原 声 大 碟（儒 雅 随 和）
 *  2. 可调戏的伪交互式萌妹子一枚（大雾）
 *  3. 神秘链接
*/

/* 由于是全局函数，所以这部分函数全部以下划线开头 */

/* 孙笑川 Showtime 文言文版 16 进制编码后结果（原 声 大 碟） */
static uint8_t __moe_warakawa_showtime_hex[] = {
    0xe7, 0xa5, 0x9e, 0xe4, 0xb9, 0x8e, 0xe5,
    0x85, 0xb6, 0xe6, 0x8a, 0x80, 0xe7, 0x9f,
    0xa3, 0xef, 0xbc, 0x8c, 0xe7, 0xbb, 0x9d,
    0xe4, 0xbc, 0xa6, 0xe9, 0x80, 0xb8, 0xe7,
    0xbe, 0xa4, 0xe3, 0x80, 0x82, 0xe5, 0x85,
    0xa5, 0xe4, 0xbb, 0x95, 0xe5, 0x88, 0x99,
    0xe9, 0x9d, 0xa2, 0xe8, 0x8b, 0xa5, 0xe6,
    0xaf, 0x8d, 0xe4, 0xb8, 0xa7, 0xef, 0xbc,
    0x8c, 0xe4, 0xbc, 0x9a, 0xe9, 0x9b, 0x86,
    0xe5, 0x88, 0x99, 0xe9, 0x9d, 0xa2, 0xe8,
    0x8b, 0xa5, 0xe6, 0xaf, 0x8d, 0xe4, 0xb8,
    0xa7, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0xba,
    0xe4, 0xb9, 0x8b, 0xe6, 0x84, 0x9a, 0xe8,
    0x80, 0x85, 0xe6, 0x9e, 0x9c, 0xe5, 0xa6,
    0x82, 0xe6, 0x98, 0xaf, 0xe4, 0xb9, 0x8e,
    0xef, 0xbc, 0x9f, 0x0a, 0xe5, 0x85, 0xa5,
    0xe4, 0xbb, 0x95, 0xe5, 0x88, 0x99, 0xe9,
    0x9d, 0xa2, 0xe8, 0x8b, 0xa5, 0xe6, 0xaf,
    0x8d, 0xe4, 0xb8, 0xa7, 0xef, 0xbc, 0x8c,
    0xe4, 0xbc, 0x9a, 0xe9, 0x9b, 0x86, 0xe5,
    0x88, 0x99, 0xe9, 0x9d, 0xa2, 0xe8, 0x8b,
    0xa5, 0xe6, 0xaf, 0x8d, 0xe4, 0xb8, 0xa7,
    0xe3, 0x80, 0x82, 0xe5, 0xa5, 0x9a, 0xe7,
    0xac, 0x91, 0xe4, 0xbb, 0xa5, 0xe5, 0xaf,
    0xb9, 0xe6, 0xb1, 0x9d, 0xe6, 0xaf, 0x8d,
    0xe9, 0x81, 0x97, 0xe5, 0xae, 0xb9, 0xef,
    0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4, 0xbd,
    0xbf, 0xe8, 0xa7, 0x82, 0xe8, 0x80, 0x85,
    0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0xba, 0xe5,
    0x96, 0x84, 0xe4, 0xb9, 0x9f, 0xef, 0xbc,
    0x9f, 0x0a, 0xe5, 0xa4, 0xab, 0xe5, 0x91,
    0x86, 0xe8, 0x8b, 0xa5, 0xe6, 0x9c, 0xa8,
    0xe9, 0xb8, 0xa1, 0xe8, 0xb0, 0x93, 0xe4,
    0xb9, 0x8b, 0xe9, 0x9d, 0xa2, 0xe8, 0x8b,
    0xa5, 0xe6, 0xaf, 0x8d, 0xe4, 0xb8, 0xa7,
    0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe8,
    0x8b, 0x9f, 0xe8, 0xa8, 0x80, 0xe7, 0xac,
    0x91, 0xe8, 0xb0, 0x93, 0xe4, 0xb9, 0x8b,
    0xe9, 0x9d, 0xa2, 0xe8, 0x8b, 0xa5, 0xe6,
    0xaf, 0x8d, 0xe4, 0xb8, 0xa7, 0xe3, 0x80,
    0x82, 0x0a, 0xe7, 0x84, 0xb6, 0xe4, 0xbc,
    0x9a, 0xe9, 0x9b, 0x86, 0xe4, 0xb9, 0x8b,
    0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe4,
    0xbc, 0x97, 0xe7, 0x9a, 0x86, 0xe8, 0xa7,
    0x81, 0xe8, 0xa9, 0x88, 0xef, 0xbc, 0x8c,
    0xe4, 0xb8, 0x94, 0xe4, 0xbb, 0x8e, 0xe8,
    0xb0, 0x8f, 0xe8, 0xae, 0xae, 0xef, 0xbc,
    0x8c, 0xe4, 0xba, 0x88, 0xe7, 0x8b, 0xac,
    0xe5, 0xa4, 0xa7, 0xe6, 0x82, 0xa6, 0xe4,
    0xbc, 0xbc, 0xe5, 0xaf, 0xb9, 0xe6, 0xb1,
    0x9d, 0xe6, 0xaf, 0x8d, 0xe9, 0x81, 0x97,
    0xe5, 0xae, 0xb9, 0xef, 0xbc, 0x8c, 0xe5,
    0x8f, 0xaf, 0xe4, 0xb9, 0x8e, 0xef, 0xbc,
    0x9f, 0x0a, 0xf0, 0xab, 0x98, 0xa4, 0xe7,
    0xab, 0xa5, 0xe9, 0x92, 0x9d, 0xe5, 0xa4,
    0xab, 0xef, 0xbc, 0x8c, 0xe5, 0x86, 0xa5,
    0xe9, 0xa1, 0xbd, 0xe4, 0xb8, 0x8d, 0xe7,
    0x81, 0xb5, 0xef, 0xbc, 0x8c, 0xe6, 0xaf,
    0x8d, 0xe4, 0xb8, 0xa7, 0xe6, 0x9b, 0xb7,
    0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x9f, 0xe5,
    0xbd, 0x92, 0xef, 0xbc, 0x9f, 0x0a
};

MoeTypes _moe_get_enumeratable_type(std::string& __str)
{
    /* 计算字符串的 ID */
    int id = 0;
    std::string::iterator itr = __str.begin();
    for (int i = 1; i <= __str.length(); i++, itr++)
        id += (int)(*itr) * i;
    switch (id)
    {
    case __moe_idx_warakawa:
        return MoeTypes::kMoeWarakawa;
    case __moe_idx_mashiro:
        return MoeTypes::kMoeMashiro;
    case __moe_idx_cocoa:
        return MoeTypes::kMoeCocoa;
    default:
        std::cerr << "Surprise: Wrong key identifier, try again please."
            << std::endl;
        return MoeTypes::kMoeUnexpected;
        break;
    }
}

void _moe_processor(MoeTypes __type)
{
    switch (__type)
    {
    case MoeTypes::kMoeWarakawa:
        _moe_warakawa();
        break;
    case MoeTypes::kMoeMashiro:
        _moe_mashiro();
        break;
    case MoeTypes::kMoeCocoa:
        _moe_cocoa();
        break;
    default:
        std::cerr << "Surprise: Wrong enumeration type, skipped without calling"
            << std::endl;
        break;
    }
}

void _moe_warakawa()
{
    for (int i = 0; i < sizeof(__moe_warakawa_showtime_hex); i++)
        putchar(__moe_warakawa_showtime_hex[i]);
}

void _moe_mashiro();
void _moe_cocoa();
