            The Interactive Language for Matbar
                    Matbar 交互式语言
                        MIL

一、简介
    MIL 是一种交互式的、专用于数学计算的程序语言。拥有简易的语法规则
和完整的说明文档。此外，MIL 的解释器 Matbar 程序定义了一套完整的运行
时解析和编译机制，并且代码量非常少，易于理解。可以用来简单了解编译原理。

二、基本语法：第一节 框架
    MIL 的基本使用框架可以是交互式终端或文件。无论如何，Matbar 总是
从标准输入（stdin 文件指针）读入内容并进行解析。要使用文件进行读入，请
使用 BASH 或其它 shell 的输入重定向功能。
    MIL 的基本解析单位是「行」，单独的「行」称为「语句」。Matbar 会一
行一行地读入标准输入的字符串，并进行解析、执行。但是注意，「行」并不是换
行符定义的，而是由分号定义的。Matbar 并不会因为读到换行符就停止解析，而
是读到分号才认为用户已经结束了一条语句的输入。
    这意味着，每一条语句必须以分号结束，否则将会引起未知的程序行为。

三、基本语法：第二节 异常
    MIL 以语句为单位，可能产生各种各样的异常（exception）。
    「异常」即程序执行流程中的例外情况，例如错误地输入了表达式会引起语法
异常，除以 0 就会引起算术异常，尝试引用未定义过的变量会引起语义异常。
    发生异常后，解释器会捕获，在控制语句中，有 exception 系列语句可以
设置解释器捕获异常后的行为。

四、基本语法：第三节 控制语句和立即表达式
    1. 控制语句。控制语句用户控制解释器（Matbar）的行为，或者调用解释
器的内部功能。当用户期望的操作不能使用代数式（详见下文）进行表达时，就可
以使用控制语句。在语法上，控制语句必须以「@」符号开头，后接由字母、连字符
构成的字符串，每一条控制语句同样必须以分号结尾。以下是 MIL 标准已经规定的
控制语句，MIL 允许解释器适当扩展控制语句：
    「@get-help」列出所有可用的控制语句
    「@quit」退出程序
    「@enumeration-variables」列出所有的定义的变量
    「@enumeration-functions」列出所有的定义的函数
    「@optimizer-disable」全局禁止代码优化器优化代码
    「@optimizer-enable」全局启用代码优化器
    「@debugger-disassemble」反汇编一个函数
    「@debugger-IR-dump」启用或者禁用 MIRL 代码显示功能
    「@debugger-color」启用或禁用汇编代码着色器
    「@exception-ignore」以语句为单位，忽略单个语句的产生的 exception，
        继续解析下一条语句
    「@exception-terminate」以语句为单位，一旦产生 exception 就退出
    「@exception-divide-by-zero」设置是否在除以 0 是产生 exception
        若不产生 exception, 我们默认 n / 0 = infinity.

    2. 立即运算语句。「立即」的概念来自汇编，这里的含义是「立即能够计算出
结果」的代数语句。语法十分简单，遵循最基本的代数式（中缀表达式）的书写方式。
有如下几条守则：
    (1) 由运算符、圆括号、数字和变量组成
    (2) 数字可以是浮点数或整数，可以有额外的负号
    (3) 圆括号（小括号）用于限定表达式优先级，必须成队出现
    (4) 运算符只能是基本四则运算和乘方五种（+, -, *, /, ^）
    (5) 负号「-」是一个右结合运算符，除此之外的运算符都是左结合性质的
    (6) 变量可以以名称的形式直接使用，在表达式中读取变量的操作称为「引用（Reference）」
    (7) 表达式的基本形式应该是一个数字常量或者变量组合上一个能够与之结合的运算符。
    (8) 允许多个表达式串联构成复杂表达式，允许使用圆括号嵌套子表达式
    (9) 表达式也是语句，必须以分号结尾

    表达式构造方法：（V 表示变量，I 表示整数，F 表示浮点数，中括号内的内容表示任意匹配一个）
    (1) 基本表达式：[VIF][+-*/^][VIF] 或 -[VIF]
        定义这个构造式生成的所有表达式的集合为 E
    (2) 复合表达式：(E)[+-*/^](E)[+-*/^]...[+-*/](E)
        定义这个构造式生成的所有表达式的集合为 R
    (3) 嵌套表达式：([ER])[+-*/^](...[+-*/^]([ER])[+-*/]...)
        定义这个构造式生成的所有表达式的集合为 N
    (4) 复杂表达式：[NER]
        定义这个构造式生成的所有表达式的集合为 C
    (5) 至此，我们已经构造完了所有可能的表达式，过程简化表示如下：
        V, I, F => E => R => N => C

五、基本语法：第四节 定义语句
    定义语句是除了控制语句和立即表达式之外的另一种常用语句。定义语句可以定义一个
变量或者函数（未来可能会支持向量 Vector 的定义）。
    基本语法：（V, I, F, E, R, N, C 是上一节中定义过的表达式集合）
    (1) 定义一个变量：name = [VIFERNC]
    (2) 定义一个函数：name[$var] = [VIFERNC]
    (3) 定义一个向量：name<[I]> = {[VIFERNC], [VIFERNC], ...}
        其中，[I]是这个向量的维度，必须是一个整数。
        花括号内部的内容称为这个向量的初始化列表，是一个 N 维向量中所有元素的集合。
        初始化列表中的每一个元素之间必须以逗号「,」分隔，元素的数量必须等于这个向量的维度。
    